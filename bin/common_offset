#!/bin/bash

: '
COMMON_OFFSET.SH is a wrapper script to create a common offset survey using the
SeidarT programs. The survey is along the x-direction, but can be extended to 
other directions.

INPUT
	-p, --project 	Project file path
	-F, --final		The final coordinates of the source. Requires 3
					arguments  x y z
	-o, --offset 	Source and reciever offset distance (meters)
	-d, --delta		Source and reciever step length (meters)
	-s, --seismic 	(OPTIONAL) Specifier to run seismic common offset 
	-r, --receivers	The coordinate locations of every survey point (meters).
'

wild='.*'

while [[ $# -gt 0 ]]; do
	key="$1"

	case $key in
	    -p|--project_file)
	    prjfile="$2"
	    shift # past argument
	    shift # past value
	    ;;
	    -o|--offset)
		xoffset="$2"
		yoffset="$3"
		zoffset="$4"
		shift;shift;shift;shift
		;;
	    -s|--seismic)
		seismic=true
		shift
		;;
		-r|--receivers)
		rcx="$2"
		shift;shift
		;;
		-h|--help)
		help=true
		shift
	esac
done

# ============================== Print Help Menu ============================== 
if [ $help ]; then
	echo
	echo ' COMMON_OFFSET.SH is a wrapper script to create a common offset survey using the'
	echo ' SeidarT programs. The survey is along the x-direction, but can be extended to '
	echo ' other directions.'
	echo 
	echo ' INPUT'
	echo '	-f, --project 	Project file path'
	echo '	-o, --offset    Source and reciever offset distance (meters)'
	echo '	-r, --receivers	The coordinate locations of every survey point (meters).'
	echo ' 	-s, --seismic 	(OPTIONAL) Specifier to run seismic common offset. Default is EM.' 
	echo 

	exit 1
fi



# ================================ Error Checks ===============================
# A quick check to make sure required arguments are given
if [[ -z $prjfile ]]; then
	echo ERROR: Missing project file
	exit 1
elif [[ -z $xoffset || -z $yoffset || -z $zoffset ]]; then
	echo ERROR: Missing source to reciever offset
	exit 1
elif [[ -z $rcx ]]; then
	echo ERROR: Missing receiver locations
	exit 1
else
	echo 
fi

# ============================== Define Variables =============================
rcxtemp='receivers_temp.xyz'
wild='.*'
tmp='temp.csv'
rcx='receivers.xyz'
aout='receiver_array.csv'

# =========================== Create the output File ==========================

# remove the extension of the project file
base=`echo "$prjfile" | rev | cut -d"." -f2- | rev`

time_stamp=`date +"%m%d%y%H%M"`

if [ $seismic ]; then
	cofilex=$base.$time_stamp.Vx.co.csv
	cofiley=$base.$time_stamp.Vy.co.csv
	cofilez=$base.$time_stamp.Vz.co.csv
	c1='Vx'
	c2='Vy'
	c3='Vz'
	xstring='S,x,'
	ystring='S,y,'
	zstring='S,z,'
	mod=s
else
	cofilex=$base.$time_stamp.Ex.co.csv
	cofiley=$base.$time_stamp.Ey.co.csv
	cofilez=$base.$time_stamp.Ez.co.csv
	c1='Ex'
	c2='Ey'
	c3='Ez'
	xstring='E,x,'
	ystring='E,y,'
	zstring='E,z,'
	mod=e
fi

# ================================ Get to work ================================

# Determine if it is 2D
dim=`grep -F 'D,dim,' $prjfile`
dim=$(echo $dim | cut -f3 -d,)

# Make sure the header fields are in X,Y,Z format
rhead=`head -n 1 $rcx`

if [[ $rhead != 'X,Y,Z' ]]; then
	echo ERROR: Receiver coordinates need to be ordered in X,Y,Z 
	exit 1
fi

# Create the temporary receiver file 
touch $rcxtemp

# Create the output text files 
if (( $(echo "$dim==2.5" | bc -l) )); then
	touch $cofiley 
fi 
touch $cofilex 
touch $cofilez 

# For the time functions
elapsed_time=0
counter=1
numlines=`wc -l < $rcx`
numlines=`echo "$numlines-1" | bc -l`

# We don't want to read the header
sed 1d $rcx | while IFS=, read X Y Z; 
do 
	start=`date +%s`

	# Create the header; this erases and rewrites each loop iteration
    echo $rhead > $rcxtemp
	# Add the coordinates
	echo $X,$Y,$Z >> $rcxtemp 

	# Set the source location
	srcx=`echo "$X + $xoffset" | bc`
	srcy=`echo "$Y + $yoffset" | bc`
	srcz=`echo "$Z + $zoffset" | bc`

	# Append to the project file
	sed -i -e "s/$xstring$wild/$xstring$srcx/" $prjfile
	sed -i -e "s/$ystring$wild/$ystring$srcy/" $prjfile
	sed -i -e "s/$zstring$wild/$zstring$srcz/" $prjfile

	echo
	echo ----------------------
	echo Run $counter of $numlines
	prjrun $prjfile --model $mod
	echo
	# -----------------------------------------------
	# Get the reciever timeseries for the z-direction
	arrayplot -p $prjfile -r $rcxtemp -c $c1 -S 1 -g 101

	# append the timeseries to the others
	paste -d',' $cofilex $aout > $tmp
	mv $tmp $cofilex
	rm $aout

# 	# -----------------------------------------------
# 	# Get the reciever timeseries for the z-direction
# 	arrayplot -p $prjfile -r $rcxtemp -c $c3 -S 1 -g 101

# 	# append the timeseries to the others
# 	paste -d',' $cofilez $aout > $tmp
# 	mv $tmp $cofilez
# 	rm $aout

# 	# -----------------------------------------------
# 	# Get the reciever timeseries for the y-direction
# 	if (( $(echo "$dim==2.5" | bc -l) )); then
# 		arrayplot -p $prjfile -r $rcxtemp -c $c2 -S 1 -g 101

# 		# append the timeseries to the others
# 		paste -d',' $cofiley $aout > $tmp
# 		mv $tmp $cofiley
# 		rm $aout
# 	fi

	# Remove the dat files
	if [[ $seismic ]]; then
		rm S*.dat
		rm V*.dat
		rm c*.dat
	else
		rm E*.dat
		rm sig*.dat 
	fi 

	# Display how long it took to run this iteration
	end=`date +%s`
	runtime=$((end-start))
	elapsed_time=$((elapsed_time+runtime))

	echo "Elapsed time of last model run:"
	echo $runtime
	echo "Total elapsed time:"
	echo $elapsed_time 
	echo
	
	counter=`echo "$counter+1" | bc`

done

rm $rcxtemp 